# name: Main workflow
# on:
#   workflow_call:
#   pull_request:
#     paths-ignore:
#       - '**.md'
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - '**.md'

# jobs:
#   test:
#     runs-on: ${{ matrix.os }}
#     env:
#       JAVA_TOOL_OPTIONS: -Xmx4g
#     timeout-minutes: 15
#     strategy:
#       matrix:
#         os: [ubuntu-latest]
# #        api-level: [23, 29]
# #        target: [default, google_apis]
#         api-level: [34]
#         target: [default]
#         arch: ["x86_64"]

#     steps:
#     - name: checkout
#       uses: actions/checkout@v4

#     - name: validate gradle wrapper
#       uses: gradle/wrapper-validation-action@v2

#     - name: build, test and lint
#       run: |
#         npm install
#         npm run build
#         npm run lint
#         npm test

#     - uses: actions/setup-java@v4
#       with:
#         distribution: 'zulu'
#         java-version: 21

#     - uses: actions/cache@v4
#       id: avd-cache
#       with:
#         path: |
#           ~/.android/avd/*
#           ~/.android/adb*
#           ~/.android/debug.keystore
#         key: avd-${{ matrix.api-level }}-${{ matrix.os }}-${{ matrix.target }}

#     - uses: gradle/actions/setup-gradle@v3

    # - name: assemble tests
    #   working-directory: test-fixture
    #   run: ./gradlew assembleAndroidTest

    # - name: enable KVM for linux runners
    #   if: runner.os == 'Linux'
    #   run: |
    #     echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
    #     sudo udevadm control --reload-rules
    #     sudo udevadm trigger --name-match=kvm

    # - name: run emulator to generate snapshot for caching
    #   if: steps.avd-cache.outputs.cache-hit != 'true'
    #   uses: ./
    #   with:
    #     api-level: ${{ matrix.api-level }}
    #     target: ${{ matrix.target }}
    #     arch: ${{ matrix.arch }}
    #     profile: Galaxy Nexus
    #     cores: 2
    #     sdcard-path-or-size: 100M
    #     avd-name: test
    #     force-avd-creation: false
    #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #     disable-animations: false
    #     working-directory: ./test-fixture/
    #     channel: canary
    #     script: echo "Generated AVD snapshot for caching."

    # - name: run action
    #   uses: ./
    #   with:
    #     api-level: ${{ matrix.api-level }}
    #     target: ${{ matrix.target }}
    #     arch: ${{ matrix.arch }}
    #     profile: Galaxy Nexus
    #     cores: 2
    #     ram-size: 2048M
    #     sdcard-path-or-size: 100M
    #     avd-name: test
    #     force-avd-creation: false
    #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #     disable-animations: true
    #     working-directory: ./test-fixture/
    #     channel: canary
    #     pre-emulator-launch-script: |
    #       echo "Running pre emulator launch script. Printing the working directory now:"
    #       pwd
    #     script: |
    #       echo $GITHUB_REPOSITORY
    #       adb devices
    #       ./gradlew connectedDebugAndroidTest

    # - name: Create AVD and generate snapshot for caching
    #   if: steps.avd-cache.outputs.cache-hit != 'true'
    #   uses: reactivecircus/android-emulator-runner@v2
    #   with:
    #     api-level: ${{ matrix.api-level }}
    #     arch: ${{ matrix.arch }}
    #     force-avd-creation: false
    #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #     disable-animations: false
    #     script: echo "Generated AVD snapshot for caching."

    # - name: Run tests
    #   uses: reactivecircus/android-emulator-runner@v2
    #   # env:
    #   #   MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
    #   with:
    #     api-level: ${{ matrix.api-level }}
    #     arch: ${{ matrix.arch }}
    #     force-avd-creation: false
    #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #     disable-animations: true
    #     script: ./gradlew connectedCheck


name: Android CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'art/**'
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        api-level: [34]
        arch: ["x86_64"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Gradle and Gradle cache
      uses: gradle/actions/setup-gradle@v3

    # - name: Create local.properties with SDK location
    #   run: |
    #     echo "sdk.dir=$ANDROID_HOME" > local.properties
    #     echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
    # - name: Grant execute permission for gradlew
    #   run: chmod +x gradlew

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Run tests
      uses: reactivecircus/android-emulator-runner@v2
      env:
        MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./gradlew connectedCheck
